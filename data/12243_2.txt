
   Other languages:
   English â€¢ ï¿½franÃ§ais â€¢ ï¿½Ñ€ÑƒÑÑÐºÐ¸Ð¹ â€¢ ï¿½ä¸­æ–‡ â€¢ ï¿½æ—¥æœ¬èªž
   MediaWiki version: â‰¥ 1.25
   Gerrit change 187728

   Starting with MediaWiki 1.25 , MediaWiki can generate HTML content from
   Mustache templates on the server and on the client. Server-side
   template parsing is implemented in PHP via the TemplateParser class,
   which acts as a wrapper around the lightncandy library. Client-side
   templates are supported via mediawiki.template* ResourceLoader modules
   and the mustache.js library.
   This is unrelated to the use of MediaWiki templates in wikitext (such
   as the {{MW file}} in this article). Templating here builds the HTML of
   a web page, not the wiki content within it.
   [ ]

Contents

     * 1 Creating templates
     * 2 TemplateParser (server-side)
          + 2.1 Caching
               o 2.1.1 Partials
     * 3 mw.template (client-side)
          + 3.1 Partials
     * 4 See also

Creating templates[edit]

   To use HTML templates in your code, first create a Mustache template
   file with a .mustache file extension, for example, MyWidget.mustache.
   Templates should contain as little programming logic as possible so
   that they are easily readable and provide proper separation of
   concerns. If your template is part of the core MediaWiki software, put
   it in core's includes/templates directory. If it is part of an
   extension, you should create a dedicated templates directory within
   your extension's directory to hold it. Templates should follow the
   Mustache-5 specification.

TemplateParser (server-side)[edit]

        MediaWiki file: TemplateParser.php
   Location:    includes/
   Source code: master â€¢ 1.33.0 â€¢ 1.32.3 â€¢ 1.31.3
   Classes:     TemplateParser

   This class finds template files, reads them, compiles them into PHP
   code, and expands tags in the template using data you provide to
   produce the output HTML. MediaWiki compiles templates as needed, and
   uses caching to store the compiled templates if available (see #Caching
   below). This avoids developers having to compile templates into PHP
   files during development or as a build step, or the server writing them
   to the file system during operation.

   To use TemplateParser, first create a new instance of the class:
$templateParser = new TemplateParser();

   If your Mustache templates do not reside in core's includes/templates,
   you need to pass the path to where they reside as the first parameter
   to the constructor (either relative to your MediaWiki root or relative
   to the calling file's directory with __DIR__):
$templateParser = new TemplateParser(  __DIR__ . '/templates' );

   You then parse templates into HTML by invoking the processTemplate()
   function. The first parameter to this is the name of your template (the
   part of the filename before .mustache). The second parameter is an
   array providing the values needed by the Mustache tags in your
   template. For example,
echo $templateParser->processTemplate(
    'MyWidget',
    [
        'username' => $user->getName(),
        'message' => 'Hello!'
    ]
);

   This replaces any instances of {{username}} and {{message}} tags in the
   "MyWidget" mustache template with the values you provided, and returns
   the resulting HTML. (The echo simply prints the generated HTML in the
   current output context.)

   As an example of HTML templating, see
   includes/templates/NoLocalSettings.mustache as used by
   includes/NoLocalSettings.php.

Caching[edit]

   TemplateParser attempts to cache the compiled PHP template. It prefers
   to use CACHE_ACCEL (See Manual:APC ), but falls back to CACHE_ANYTHING
   (a general object cache like Memcached or Redis, see Manual:Caching ).
   CACHE_ACCEL requires the "apc" extension in PHP 5.4 or earlier, and the
   "apcu" extension for PHP 5.5+. HHVM has it built-in.

Partials[edit]

   The cache is keyed on a hash of the template file's contents, so if you
   change a template file, the compiled template will update (you may need
   to clear your wiki's front-end cache using ?action=purge). However,
   this does not notice changes to "partial" templates that you include
   with {{>SubTemplateName}} (bug T113095). So if you change a partial,
   you need to make cosmetic changes to the parent templates that include
   it, or restart your cache.

mw.template (client-side)[edit]

   To use a Mustache template on the client-side, add it to your
   ResourceLoader module definition first:
'ext.coolExtension.interface' => [
        'templates' => [
                'foo.mustache' => 'templates/foo.mustache',
        ],
        'scripts' => [
                'resources/interface.js',
        ],
],

   The template definition above consists of two pieces, a file path
   (templates/foo.mustache) and an optional alias (foo.mustache). The
   alias must be suffixed with the name of the templating language (e.g.
   '.mustache') so that it knows which compiler to use. ResourceLoader
   automatically serves the supporting mediawiki.template.xx JavaScript
   modules, so you don't need to mention anything in dependencies. Once
   you have added the template to your module, you can retrieve it in
   JavaScript using mw.template.get():
myTemplate = mw.template.get( 'ext.coolExtension.interface', 'foo.mustache' );

   To render the template and data into HTML output, call the compiled
   template's render() function:
data = {
        username: mw.config.get( 'wgUserName' ),
        message: 'Hello!'
};
$html = myTemplate.render( data );

Partials[edit]

   MediaWiki version: â‰¥ 1.27
   Gerrit change 206490

   Partials are also supported on the client-side. See
   https://mustache.github.io/mustache.5.html#Partials for more
   information.

See also[edit]

     * Requests for comment/HTML templating library

   Retrieved from
   "https://www.mediawiki.org/w/index.php?title=Manual:HTML_templates&oldi
   d=3391060#mediawiki.template_(client-side)"
   Categories:
     * MediaWiki code
     * MediaWiki components

   Hidden category:
     * Pages with ignored display titles

Navigation menu

Personal tools

     * English
     * Not logged in
     * Talk
     * Contributions
     * Create account
     * Log in

Namespaces

     * Manual
     * Discussion

   [ ]

Variants

Views

     * Read
     * Edit
     * View history

   [ ]

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Get MediaWiki
     * Get extensions
     * Tech blog
     * Contribute

Support

     * User help
     * FAQ
     * Technical manual
     * Support desk
     * Communication

Development

     * Bug tracker
     * Code repository
     * Code docs
     * Statistics

MediaWiki.org

     * Community portal
     * Recent changes
     * Translate content
     * Random page
     * Current issues
     * Sandbox

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Cite this page

In other languages

   Add links

     * This page was last edited on 1 September 2019, at 20:25.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. See Terms of Use for details.

     * Privacy policy
     * About MediaWiki.org
     * Disclaimers
     * Code of Conduct
     * Developers
     * Cookie statement
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
   #Edit MediaWiki (en) MediaWiki Atom feed

ResourceLoader/Core modules

   From MediaWiki.org
   < ResourceLoader(Redirected from Mediawiki.api)
   Jump to navigation Jump to search
   Other languages: English  â€¢ æ—¥æœ¬èªž â€¢ ä¸­æ–‡
   See also API documentation on doc.wikimedia.org
   shortcut: RL/CM
   [ ]

Contents

     * 1 MediaWiki
          + 1.1 mediawiki
               o 1.1.1 mw.config
               o 1.1.2 mw.hook
               o 1.1.3 mw.html
               o 1.1.4 mw.loader
                    # 1.1.4.1 mw.loader.load
                    # 1.1.4.2 mw.loader.using
                    # 1.1.4.3 mw.loader.getScript
                    # 1.1.4.4 mw.loader.inspect
               o 1.1.5 mw.log
               o 1.1.6 mw.message
               o 1.1.7 mw.now
               o 1.1.8 mw.track
          + 1.2 mediawiki.user
          + 1.3 user.options
               o 1.3.1 mw.user.options
          + 1.4 user.tokens
               o 1.4.1 mw.user.tokens
          + 1.5 mediawiki.api
          + 1.6 mediawiki.cookie
          + 1.7 mediawiki.debug
          + 1.8 mediawiki.feedback
               o 1.8.1 mw.Feedback.setup
               o 1.8.2 mw.Feedback.display
               o 1.8.3 mw.Feedback.displaySubmitting
               o 1.8.4 mw.Feedback.displayBugs
               o 1.8.5 mw.Feedback.displayThanks
               o 1.8.6 mw.Feedback.displayForm
               o 1.8.7 mw.Feedback.displayError
               o 1.8.8 mw.Feedback.cancel
               o 1.8.9 mw.Feedback.submit
               o 1.8.10 mw.Feedback.launch
          + 1.9 mediawiki.inspect
          + 1.10 mediawiki.jqueryMsg
          + 1.11 mediawiki.notify
          + 1.12 mediawiki.storage
          + 1.13 mediawiki.ui
          + 1.14 mediawiki.widgets
          + 1.15 mediawiki.util
               o 1.15.1 addCSS
               o 1.15.2 addPortletLink
               o 1.15.3 $content
               o 1.15.4 getParamValue
               o 1.15.5 getUrl
               o 1.15.6 isIPv4Address
               o 1.15.7 isIPv6Address
               o 1.15.8 jsMessage
               o 1.15.9 rawurlencode
               o 1.15.10 validateEmail
               o 1.15.11 wikiUrlencode
               o 1.15.12 wikiGetlink
               o 1.15.13 wikiScript
          + 1.16 mediawiki.RegExp
               o 1.16.1 mw.RegExp.escape
          + 1.17 mediawiki.Title
          + 1.18 mediawiki.Uri
     * 2 OOjs and OOUI
          + 2.1 oojs
          + 2.2 oojs-ui
     * 3 jQuery & plugins
          + 3.1 jquery
          + 3.2 jquery.accessKeyLabel
          + 3.3 jquery.async
          + 3.4 jquery.autoEllipsis
          + 3.5 jquery.badge
          + 3.6 jquery.checkboxShiftClick
               o 3.6.1 jQuery#checkboxShiftClick
          + 3.7 jquery.chosen
          + 3.8 jquery.client
               o 3.8.1 jQuery.client.profile
               o 3.8.2 jQuery.client.test
          + 3.9 jquery.collapsibleTabs
          + 3.10 jquery.colorUtil
          + 3.11 jquery.color
          + 3.12 jquery.cookie
          + 3.13 jquery.expandableField
          + 3.14 jquery.highlightText
          + 3.15 jquery.i18n
          + 3.16 jquery.json
          + 3.17 jquery.jStorage
          + 3.18 jquery.localize
          + 3.19 jquery.makeCollapsible
          + 3.20 jquery.placeholder
          + 3.21 jquery.qunit
          + 3.22 jquery.qunit.completenessTest
               o 3.22.1 CompletenessTest
          + 3.23 jquery.suggestions
          + 3.24 jquery.spinner
          + 3.25 jquery.tabIndex
          + 3.26 jquery.tablesorter
          + 3.27 jquery.textSelection
          + 3.28 jquery.tipsy
          + 3.29 jquery.mwExtension
               o 3.29.1 jQuery.trimLeft
               o 3.29.2 jQuery.trimRight
               o 3.29.3 jQuery.ucFirst
               o 3.29.4 jQuery.escapeRE
               o 3.29.5 jQuery.isDomElement
               o 3.29.6 jQuery.isEmpty
               o 3.29.7 jQuery.compareArray
               o 3.29.8 jQuery.compareObject
          + 3.30 jQuery UI

   This page lists modules that ship with MediaWiki core by default. It
   reflects the current development version of MediaWiki and may vary from
   the latest stable release.

   The order of the modules should be kept similar to their definition in
   Resources.php.

   The modules jquery and mediawiki together form the base environment
   ("startup") and are always present. They should not (and in fact, can
   not) be loaded as modules or dependencies. mediawiki is what provides
   the loader client itself. jQuery and the other base utilities provided
   by mediawiki are internal dependencies of the ResourceLoader client.

MediaWiki[edit]

mediawiki[edit]

     * API Documentation

   This is the MediaWiki base module. It initialises the mw global object.

mw.config[edit]

     * API Documentation

   For a complete list of configuration values in mw.config, check out
   Manual:Interface/JavaScript. By default, keys here are also reflected
   as global variables for backwards compatibility (since MediaWiki 1.17).
   A console message will be shown when the global variables are used, as
   they are deprecated. The keys are identical to the variables beginning
   in wg, such as wgSiteName, wgArticleId etc.
// Check existence
if ( mw.config.exists( 'wgGlobalGroups' ) ) {
        // CentralNotice has registered this variable...
}

// Or just a plain access for comparison
// (no need to check exists first, it falls back to null)
if ( mw.config.get( 'wgPageName' ) === 'ResourceLoader' ) {
        // Do stuff...
}

/* Access multiple ones for use throughout a larger code base
   Returns an array containing the variables requested.        */
var conf = mw.config.get([
        'wgServer',
        'wgPageName',
        'wgCanonicalSpecialPageName',
        'wgUserLanguage'
]);

if ( conf.wgCanonicalSpecialPageName === 'Blankpage' ) {
        // Do stuff...
}

mw.hook[edit]

   MediaWiki version: â‰¥ 1.22
   r56762
     * API Documentation

   A framework for registering and firing events in JavaScript (as opposed
   to doing everything on document ready). For example, the snippet below
   provides a message once the categories on a page load:
mw.hook( 'wikipage.categories' ).add( function ( $content ) {
        if (mw.config.get("wgCategories").length === 0) {
                alert("Please add categories to this page");
        }
});

mw.html[edit]

     * API Documentation

   Helper functions for escaping and creating strings of HTML.

mw.loader[edit]

     * API Documentation

mw.loader.load[edit]

   Load one or more modules, a script or a stylesheet. To load an external
   script or stylesheet, the URL must start with either "http://",
   "https://" or "//" (protocol-relative), or "/" (local path). Provide a
   MIME-type as second parameter (either "text/javascript" or "text/css").
   If no MIME-type is provided, the default "text/javascript" is assumed.
   mw.loader creates an asynchronous request, if you need to run code that
   depends on a module, use mw.loader.using instead (which provides a
   callback). If you need a callback from an external script, use
   mw.loader.getScript (or jQuery.getScript).

   Loader instructions represent the intent that a module by that name
   should be loaded. It will not load the same module a second time if has
   already been loaded previously. This does not apply to scripts and
   stylesheets â€“ they will be loaded each time, even if loaded previously.
   If a script defines window.Foo, you can use ( window.Foo !== undefined
   ) to check if that script has already been loaded.
// Module by name
mw.loader.load( 'oojs' );

// Multiple non-external modules at once
mw.loader.load( ['oojs', 'mediawiki.Title'] );

// External javascript file
mw.loader.load( 'https://www.mediawiki.org/w/index.php?title=MediaWiki:Gadget-UT
CLiveClock.js&action=raw&ctype=text/javascript' );

// External stylesheet
mw.loader.load( 'https://example.org/mystyles.css', 'text/css' );

// Local script
mw.loader.load( '/w/index.php?title=MediaWiki:Gadget-HotCat.js&action=raw&ctype=
text/javascript' );

// Local stylesheet
mw.loader.load( '/w/index.php?title=User:Example/custom-foo.css&action=raw&ctype
=text/css', 'text/css' );

// Local gadget (the gadget must be defined in [[MediaWiki:Gadgets-definition]])
mw.loader.load( 'ext.gadget.Navigation_popups' );

mw.loader.using[edit]

   Loads modules and then executes a callback function. You may call
   using() with two or three arguments: dependencies, a callback function
   to execute when modules are successfully loaded, and a callback
   function to execute on error. Or you can call it with one argument and
   use a jQuery promise object returned by this function (since MediaWiki
   1.23) to specify callbacks.

   Only modules and local gadgets can be loaded by calling using(). Trying
   to load other scripts or stylesheets will result in an "Unknown
   dependency" error. If you need a callback from another script, use
   mw.loader.getScript (or jQuery.getScript) instead.
mw.loader.using( 'jquery.colorUtil' ).then( function () {
        var curColor, newColor;

        // This function will be called right away if the required modules are a
lready loaded.
        // Otherwise the module(s) are loaded and if all successful, the functio
n is called.
        curColor = 'rgb(70,140,210)';
        newColor = $.colorUtil.getColorBrightness( curColor, +0.2 );
        alert( '20% brigher than ' + curColor + ' is ' + newColor );
} );

mw.loader.getScript[edit]

   MediaWiki version: â‰¥ 1.33
   Gerrit change 487566

   Load a script by URL. Returns a jQuery promise object which can be used
   to specify callbacks.

   Example:
mw.loader.getScript( 'https://example.org/x-1.0.0.js' )
    .then( function () {
        // Script succeeded. You can use X now.
    }, function ( e ) {
        // Script failed. X is not available
        mw.log.error( e.message ); // => "Failed to load script"
    } );
} );

   To get a single callback from multiple promises, use jQuery.when or
   Promise.all
$.when(
    mw.loader.getScript( 'https://example.org/x-1.0.0.js' ),
    mw.loader.getScript( 'https://example.org/y-2.0.0.js' )
)
    .then( function () {
        // Both script succeeded. You can use X and Y now.
    }, function ( e ) {
        // A script failed, and is not available
        mw.log.error( e.message ); // => "Failed to load script"
    } );
} );

mw.loader.inspect[edit]

   MediaWiki version: â‰¥ 1.22
   Gerrit change 88408

   Lazy-loads the mediawiki.inspect module and executes its main method
   runReports.

   Shows an ordered list of all ResourceLoader modules that are loaded on
   the page, sorted by the total size of each module's JavaScript, CSS,
   Mustache templates, and string assets. Can show CSS usage individually
   using mw.loader.inspect("css").

   In MediaWiki 1.32 this function has been renamed to mw.inspect (Gerrit
   change 436340).

mw.log[edit]

     * API Documentation

   Collection of methods to help log messages to the console.

mw.message[edit]

     * API Documentation

          See also Manual:Messages API#Using messages in JavaScript

   If the mediawiki.jqueryMsg module is loaded, the behaviour of this
   module changes significantly. See above link.

mw.now[edit]

   MediaWiki version: â‰¥ 1.23
   Gerrit change 99547

   Get the current time, measured in milliseconds since January 1, 1970
   (UTC).

   On browsers that implement the Navigation Timing API, this function
   will produce floating-point values with microsecond precision that are
   guaranteed to be monotonic. On all other browsers, it will fall back to
   using Date.
var totalTime, time = mw.now();
// some expensive code
totalTime = mw.now() - time;

mw.track[edit]

   MediaWiki version: â‰¥ 1.23
   Gerrit change 99547

   Track an analytic event.

   This method provides a generic means for MediaWiki JavaScript code to
   capture state information for analysis. Each logged event specifies a
   string topic name that describes the kind of event that it is. Topic
   names consist of dot-separated path components, arranged from most
   general to most specific. Each path component should have a clear and
   well-defined purpose. Data handlers are registered via
   `mw.trackSubscribe`, and receive the full set of events that match
   their subscription, including those that fired before the handler was
   bound.

   The WikimediaEvents extension demonstrates how to add a subscriber for
   the "timing" and "counter" topics (example).
var totalTime, time = mw.now();
// some expensive code
totalTime = mw.now() - time;
mw.track( 'timing.MediaWiki.foo.bar', totalTime );

mediawiki.user[edit]

     * API Documentation

   Module that represents information about the current user.

user.options[edit]

     * user.options

mw.user.options[edit]

   Contains the preferences of the user, or the defaults when logged out.
// Get a preference option and use it directly
alert( 'According to your preferences, your gender is ' + mw.user.options.get( '
gender' ) );

// Get several preferences and compare them
var opts = mw.user.options.get( ['diffonly', 'showhiddencats'] );
if ( opts.diffonly === 0 && opts.showhiddencats === false ) {
        // User's preferences match
} else {
        // User's preferences don't match
}

   This module is loaded asynchronously and may depend on a separate HTTP
   request for the user.defaults module. Always declare the relevant
   dependencies for your module, or use mw.loader.using().

user.tokens[edit]

     * user.tokens

mw.user.tokens[edit]

   MediaWiki version: â‰¥ 1.19
   r88553

   Is pre-populated with api tokens. Currently editToken, watchToken, and
   patrolToken.
var edittoken = mw.user.tokens.get( 'editToken' );
var watchtoken = mw.user.tokens.get( 'watchToken' );

   See a live example from the mediawiki.api.watch module.

mediawiki.api[edit]

   MediaWiki version: â‰¥ 1.18.1
   r105646
     * API Documentation
     * mediawiki.api

   This module provides the mw.Api constructor. The main methods of the
   mw.Api object are get(), post(), and ajax(). The mediawiki.api module
   (and its plugins) return a Promise â€“ similar to jQuery.ajax (and its
   derivatives such as jQuery.get, jQuery.post and jQuery.getJSON).

   Before MediaWiki 1.32 (Gerrit change 434179), the methods were part of
   separate modules named under mediawiki.api.*. These have been merged
   into the main module mediawiki.api, so you only have to depend on that
   module. The submodules have been deprecated with warnings. These
   submodules have been removed in MediaWiki 1.33.

   Examples of methods that are available:
     * mw.Api#edit - Edit an existing page.
     * mw.Api#saveOptions - Changes one or more user preferences.
     * mw.Api#watch - Add a given title (or titles) to the user's
       watchlist.

   Browse mw.Api Documentation

mediawiki.cookie[edit]

   MediaWiki version: â‰¥ 1.24
   Gerrit change 120806
     * API Documentation

   Cookie module that follows most of MediaWiki's cookie settings (except
   wgCookieSecure). Simple examples:
var value;

mw.cookie.set( 'cookieToSet', 'valueToSet' );

value = mw.cookie.get( 'cookieToGet' );

   This module prepends the cookie names with $wgCookiePrefix (e.g.
   "enwikiname=value"). If you use this module only you shouldn't
   encounter issues, but you might do if you mix it with other cookie
   handling codes.

   See the API documentation for available options.

mediawiki.debug[edit]

   MediaWiki version: â‰¥ 1.19
     * API Documentation
     * mediawiki.debug

mediawiki.feedback[edit]

   MediaWiki version: â‰¥ 1.19
     * API Documentation
     * mediawiki.feedback

   User interface for collecting feedback, particularly on new features.
   This sets the mw.Feedback constructor. Example:
var feedback = new mw.Feedback();
$( '#myButton' ).click( function () { feedback.launch(); } );

mw.Feedback.setup[edit]

   Sets up feedback GUI.

mw.Feedback.display[edit]

   Displays a particular part of the feedback interface.

mw.Feedback.displaySubmitting[edit]

   Shows that the feedback is being added.

mw.Feedback.displayBugs[edit]

   Shows information about bug tracker

mw.Feedback.displayThanks[edit]

   Shows thank you message.

mw.Feedback.displayForm[edit]

   Displays the feedback form, with optional pre-filled contents.

mw.Feedback.displayError[edit]

   Shows given error message.

mw.Feedback.cancel[edit]

   Dismisses feedback form.

mw.Feedback.submit[edit]

   Submits feedback form using mw.Api.newSection.

mw.Feedback.launch[edit]

   Main entry point for displaying the feedback form, with optional
   pre-filled contents.

mediawiki.inspect[edit]

   MediaWiki version: â‰¥ 1.22
   Gerrit change 88408
     * API Documentation

   The mw.loader.inspect function lazy-loads this module and executes its
   main method runReports.

mediawiki.jqueryMsg[edit]

     * mediawiki.jqueryMsg

          See also Manual:Messages API#Using messages in JavaScript

   This module sets the mediawiki.jqueryMsg object. This is used for
   advanced message parsing. Use it only when mw.message does not meet
   your needs. For example, mediawiki.jqueryMsg is required for plural and
   gender support, the int: magic word and links.

mediawiki.notify[edit]

   MediaWiki version: â‰¥ 1.20
   Gerrit change 19199
     * mediawiki.notify (entry point)
     * mediawiki.notification (main code)

   Creates bubble notifications. Basic examples:
mw.notify( 'This is a notification.' ); // Send a plaintext notification
mw.notify( mw.message( 'some-message' ) ); // Use an i18n message to send a noti
fication
mw.notify( $( '<span>This is an <u>HTML</u> notification.</span>' ) ); // Send a
n HTML notification with a jQuery instance (a DOM node also works)

mw.notify( 'Test', { title: 'Title!' } ); // Give the notification a title
mw.notify( 'Test', { autoHide: false } ); // Don't automatically hide the notifi
cation
mw.notify( 'Test', { tag: 'foobar' } ); // Send a notification tagged with a tag
mw.notify( 'Test 2', { tag: 'foobar' } ); // This one will replace the previous
'foobar' notification.

mediawiki.storage[edit]

     * mediawiki.storage

   Wrapper for HTML5 Web Storage.
// localStorage
mw.storage.get( 'key' );
mw.storage.set( 'key', 'value' );
mw.storage.remove( 'key' );

// sessionStorage
mw.storage.session.get( 'key' );
mw.storage.session.set( 'key', 'value' );
mw.storage.session.remove( 'key' );

   If you need to replace $.jStorage, be aware mw.storage saves only
   string values, so you must additonal use something like
   JSON.stringify() and JSON.parse() or parseInt/parseFloat.

mediawiki.ui[edit]

   MediaWiki version: â‰¥ 1.22
     * mediawiki.ui

   (deprecated in 1.29) Please use OOUI instead.

   UI module developed as part of the Agora project. It defines mw-ui-*
   CSS styles. It is used in the Login and Create account forms and
   several extensions. It provides one appearance for Vector and another
   for the rest of the skins.

mediawiki.widgets[edit]

     * API documentation

mediawiki.util[edit]

     * API Documentation
     * mediawiki.util

addCSS[edit]

   Adds a <style> element to the HEAD and returns the CSSStyleSheet
   object.

   The CSSStyleSheet object can be used to disable the css rules at any
   later time and re-enable them as well. This can be done through the
   'disabled' attribute. When setting this to true, the rules no longer
   apply. When setting to false, the rules apply again.

   See also W3 on CSSStyleSheet for more info.
// Add a simple stylesheet rule
mw.util.addCSS( '.plainlinks { color: green; }' );

// Add a rule and set a variable to the sheet
var myCssRules = mw.util.addCSS( '.plainlinks { color: green; }' );
$( '#myButton' ).click( function () {
        // When button is clicked, toggle the stylesheet from true to non-true (
false), or from false to non-false (true)
        myCssRules.disabled = !myCssRules.disabled;
} );

addPortletLink[edit]

   This function is ported from the legacy wikibits keeping it fully
   backwards compatible, with a few adjustments that support all core
   skins and with added support for a CSS-selector as nextnode.

   Only the first three arguments are required. In case you need to
   execute a custom function when the user clicks on a portlet use the
   jQuery(...).on('click', .. ) on returned Element object to attach a
   callback that runs the code that should be executed.

   See the mw.util documentation for details.
// First wait for mediawiki.util to load, and the page to be ready.
$.when( mw.loader.using( 'mediawiki.util' ), $.ready ).then( function () {
   // General usage:
    mw.util.addPortletLink( portletId, href, text /*, id, tooltip, accesskey, ne
xtnode */ );
} );

// Add MediaWiki.org-link in the toolbox before the Print-link
var newElement = mw.util.addPortletLink(
        'p-tb',
        '//www.mediawiki.org/',
        'MediaWiki.org',
        't-mworg',
        'Go to MediaWiki.org',
        'm',
        '#t-print'
);

// The old way of passing a DOM-node still works
mw.util.addPortletLink(
        'p-tb',
        '//www.mediawiki.org/',
        'MediaWiki.org',
        't-mworg',
        'Go to MediaWiki.org',
        'm',
        document.getElementById( 't-print' )
);

$content[edit]

   A jQuery object for a page's overall content area regardless of the
   skin used. This is, for example, #content in the Vector-skin (before
   1.20 it was #bodyContent).

   This does not refer to the area where the page content goes. If you
   wish to work with that area of the page instead of the overall content
   area you should use $('#mw-content-text') instead.

   This property is populated on document ready. To use it, wait for
   $.ready and be sure to have a module dependency on mediawiki.util which
   will ensure your document ready handler fires after initialization.

   Because of the lazy-initialised nature of this property, you are
   discouraged from using it.
/* Add some HTML to the page content */
mw.util.$content.append( '<h2>Lorem ipsum</h2><p>This section was just added to
the bottom of the wiki page.</p>' );

/* Count number of tables in the page's content with a class of "wikitable" */
var $wikitablesInPage = mw.util.$content.find( 'table.wikitable' );

if ( $wikitablesInPage.length ) {
        alert( 'There are ' + $wikitablesInPage.length + ' wikitables on this pa
ge.' );
} else {
        alert( 'There are no wikitables on this page.' );
}

   Here is a more advanced example involving loading in extra content with
   an AJAX request. Run this example on a page other than the main page.
/* Loads in main page (or any page for that matter) over AJAX (may be useful for
 Special:BlankPage) */

// Put a loading message on top of the page
mw.util.$content.prepend( '<p><em>Loading...</em></p><hr/>' );

// To get the article contents, use #mw-content-text instead.
$('#mw-content-text').load( mw.util.getUrl( mw.config.get( 'wgMainPageTitle' ) )
 + ' #mw-content-text', function () {
        mw.notify( 'Load complete!' );
} );

getParamValue[edit]

   This function returns the value of the specified URL parameter. By
   default it uses the current window's address. Optionally you can pass
   it a custom location.

   It returns null if the parameter is not present. Returns an empty
   string("") if it was an empty parameter (such as
   /page.php?some=parameter&emptyparameter=&id=12
// Location: https://www.mediawiki.org/w/index.php?title=ResourceLoader/Default_
modules&action=edit&section=28
// Suppose we're editing a page section, this will return the number of the edit
 section
mw.util.getParamValue( 'section' ); /* returns '28'; */

// Extract a value from a custom url
// For example on a diff page where there is: "â† Older edit" and you need the ol
did of the previous edit
var oldid = mw.util.getParamValue( 'oldid', '//www.mediawiki.org/w/index.php?tit
le=ResourceLoader/Default_modules&diff=prev&oldid=365296' );
if ( oldid !== null ) {
        alert( 'The previous text version of this page has id: ' + oldid );
} else {
        alert( 'No "oldid" parameter found in the given address.' );
}

getUrl[edit]

   This function returns the address to a local wiki page.
var sandboxLink = mw.html.element(
        'a', {
                href: mw.util.getUrl( 'Sandbox 3000' ), // returns "/wiki/Sandbo
x_3000"
                title: 'Go to Sandbox'
        }, 'Click here to enter the sandbox!'
);

isIPv4Address[edit]

   MediaWiki version: â‰¥ 1.18
   r83202

   This function returns bool for passed string is valid IPv4 Address or
   not.
// true
mw.util.isIPv4Address( '192.0.2.0' );

// false (range is invalid IPv4 Address)
mw.util.isIPv4Address( '192.0.2.0/24' );

// false
mw.util.isIPv4Address( 'string' );

isIPv6Address[edit]

   MediaWiki version: â‰¥ 1.18
   r83202

   This function returns bool for passed string is valid IPv6 Address or
   not.
// true
mw.util.isIPv6Address( '2001:db8:a:0:0:0:0:0' );

// true
mw.util.isIPv6Address( '2001:db8:a::' );

// false (range is invalid IPv6 Address)
mw.util.isIPv6Address( '2001:db8:a::/32' );

// false
mw.util.isIPv6Address( 'string' );

jsMessage[edit]

   MediaWiki version: â‰¥ 1.18
   r78156

   (deprecated in 1.24) Use mw.notify instead.

   This function was ported from the legacy wikibits module, with full
   backwards compatibility, with a few improvements and with added support
   for hiding pre-existing messages by calling the method without
   arguments (or passing null).
// Basic usage, replace/add the message on top
mw.util.jsMessage( 'This is something a <strong>message</strong> for the <strong
>user</strong>' );

// Classed usage, adds/replaces the 'mw-js-message-foobar' as class for the mess
age-box
mw.util.jsMessage( 'Foobar message 01255', 'foobar' );

// Any of the folllowing will empty and hide the box
mw.util.jsMessage();
mw.util.jsMessage( '' );
mw.util.jsMessage( null );

rawurlencode[edit]

   This function returns an encoded string in its raw form for use in
   urls.
var exFooUrl = 'http://example.org/foo/' + mw.util.rawurlencode( mw.config.get(
'wgPageName' ) );

   For building query strings, you may want to use jQuery.param instead:
var query = {
        page: 'MyPage',
        value: mw.config.get( 'skin' ),
        action: 'foo'
};

var fooQuery = 'http://example.com/stuff.php?' + $.param( query );

validateEmail[edit]

   Returns true if its string parameter is a valid e-mail address
   according to HTML5 specification, false if not, and null if passed an
   empty string.
var isValid = mw.util.validateEmail( "joe@example.com" ) === true;

wikiUrlencode[edit]

   This function returns a "pretty" version of a URL encoded wiki page
   name. It keeps slashes and colons unencoded. The behavior differs from
   wfUrlencode on the PHP side.
// This url will end up in the user's addressbar, so prettification is useful.
var $histLink = $( '<a>' ).attr(
        'href',
        mw.config.get( 'wgScript' ) + '?action=history&title=' + mw.util.wikiUrl
encode( mw.config.get( 'wgPageName' ) ),
);

// This will never be shown, don't bother with string concatenation, just encode
 it regularly with $.param(), much easier.
jQuery.ajax({
        url: mw.config.get( 'wgScript' ) + '?' + $.param({ action: 'history', ti
tle: mw.config.get( 'wgPageName' ) }),
        dataType: 'html'
})
.done( function ( html ) {
        /* .. */
});

wikiGetlink[edit]

   (deprecated in 1.23) (removed in 1.32) Gerrit change 429993

   Use mw.util.getUrl instead.

wikiScript[edit]

   MediaWiki version: â‰¥ 1.18
   r88513

   This function returns the location of a script on the current wiki.
   Much like wfScript in GlobalFunctions.php.

   Parameters: str - Name of the script (eg. 'api'), defaults to 'index'.
jQuery.getJSON( mw.util.wikiScript( 'api' ), {
        format: 'json',
        action: 'query',
        titles: 'Main Page',
        prop: 'revisions'
} ).done( function ( data ) {
        // data.query
} );

mediawiki.RegExp[edit]

   MediaWiki version: â‰¥ 1.26
     * mediawiki.RegExp

mw.RegExp.escape[edit]

   Returns a string for literal use in a regular expressions by escaping
   characters that have a special meaning in a regex.

mediawiki.Title[edit]

     * API Documentation
     * mediawiki.Title

   This sets the mw.Title constructor, which has several methods in its
   prototype. Basic example:
var t = new mw.Title( 'Image: foo_bar baz.jpg' );
t.getMain(); // "Foo_bar_baz.jpg"
t.getNamespaceId(); // 6
t.getNamespacePrefix(); // "File:"

mediawiki.Uri[edit]

     * API Documentation
     * mediawiki.Uri

   Basic examples:
var uri = new mw.Uri(); // Instance for the location of the current window

// Add one or more URL parameters, automatically handling ? and & as needed.
// Note that this modifies it in place, rather than creating a new URI object.
uri.extend( { action: 'edit', section: 3 } );

var otheruri = new mw.Uri( 'http://mediawiki.org/' ); // The trailing slash is *
required*
otheruri.toString(); // "http://mediawiki.org"

OOjs and OOUI[edit]

   MediaWiki version: â‰¥ 1.23

oojs[edit]

     * API Documentation

   OOjs is an API module which provides a consistent way of implementing
   object-oriented design in JS.

oojs-ui[edit]

     * API Documentation

   OOUI uses OOjs to implement a UI toolkit. oojs-ui is the legacy name
   for the module.

jQuery & plugins[edit]

jquery[edit]

     * jquery

   More information about jQuery's presence in MediaWiki, see jQuery. For
   more about jQuery in general and all its core functions, refer to
   http://api.jquery.com/

   ResourceLoader provides jQuery as part of its base environment (the
   loader client uses jQuery internally), therefore this module is always
   loaded and should not (and in fact can not) be loaded through
   ResourceLoader (as dependency or otherwise).

jquery.accessKeyLabel[edit]

     * API Documentation

jquery.async[edit]

     * jquery.async
     * Plugin documentation

jquery.autoEllipsis[edit]

   MediaWiki versions: 1.16 â€“ 1.31

   (removed in 1.31) Gerrit change 386469

jquery.badge[edit]

   MediaWiki versions: 1.20 â€“ 1.31

   (removed in 1.31) Gerrit change 386029 (T178450)

   The code is still available at
   https://github.com/wikimedia/jquery-badge. Also, some wikis have it
   hacked in as a gadget, such as Wikimedia Commons.

   This is a jQuery module that allows you to put a red notification
   "badge" on an item on the page.

jquery.checkboxShiftClick[edit]

     * jquery.checkboxShiftClick

jQuery#checkboxShiftClick[edit]

   This single-function plugin can be called to add this functionality to
   any number of checkboxes. By default (onload) it's applied to all input
   elements that have a type of checkbox, excluding any with a class of
   'noshiftselect'. As it has a built-in prevention to avoid binding the
   CheckboxShiftClick twice to the same element you can simply run the
   line below under "Default" again at any time if you want to enable
   dynamically added checkboxes in the page to be shift-selectable as
   well. Or alternatively run it on the specific selector of choice (see
   second example below).
// Default:
$( 'input[type=checkbox]:not(.noshiftselect)' ).checkboxShiftClick();

// Enable the functionality for checkboxes in dynamically created form <form id=
"my-tool-form">
$( 'form#my-tool-form input[type=checkbox]' ).checkboxShiftClick();

jquery.chosen[edit]

     * jquery.chosen

   â€œChosen is a jQuery plugin that makes long, unwieldy select boxes much
   more user-friendly.â€ â€” harvesthq.github.io

   In fact, it turns a select into a combo box with autocomplete
   functionality by default but also supports grouping, and "tagging"
   (i.e. multiple values).
$("select").chosen({/* options */});

jquery.client[edit]

     * jquery.client

   A plugin that extracts information about the client's browser, layout
   engine and operating system. Use this instead of jQuery.browser, which
   is deprecated and will be removed from jQuery in the near future.

jQuery.client.profile[edit]

   The profile function is the main function here and returns (and caches)
   all the information in an object in. All possible values (except for
   version numbers) are predefined. A typical return looks like this:
/* jQuery.client.profile() */
{
        'name': 'firefox',
        'layout': 'gecko',
        'layoutVersion': '20100101',
        'platform': 'win'
        'version': '10.0.2',
        'versionBase': '10',
        'versionNumber': 10,
}

   Here a few examples:
if ( $.client.profile().layout == 'gecko' && $.client.profile().platform == 'lin
ux' ) {
        // This will only run on Gecko browsers (ie. Mozilla Firefox) on Linux.
}

if ( $.client.profile().name == 'msie' ) {
        // Only for good ol' Internet Explorer
}

// Shortcut
var prof = $.client.profile();
if ( prof.name == 'firefox' && prof.versionBase == '2' && prof.platform == 'win'
 ) {
        // Target Mozilla Firefox 2.x on Windows
}

   Check jquery.client.js for possible values of browser names, layout
   engines and platforms.

jQuery.client.test[edit]

   ...

jquery.collapsibleTabs[edit]

     * jquery.collapsibleTabs

   Used by the Vector extension.

jquery.colorUtil[edit]

   MediaWiki version: â‰¥ 1.18
   r79686
     * jquery.colorUtil

   getRGB
   colors
   rgbToHsl
   hslToRgb
   getColorBrightness

jquery.color[edit]

   MediaWiki version: â‰¥ 1.17
     * jquery.color

jquery.cookie[edit]

     * jquery.cookie

   You can use jquery.cookie or you can use mediawiki.cookie instead in
   new code, since it takes into account MediaWiki's cookie configuration
   settings for you.

   This plugin allows you to set, get and delete cookies.
// Set cookie (simple, current page/path)
$.cookie( 'myName', 'Flower' );

// Set cookie (extra options)
$.cookie( 'myName', 'Flower', {
        expires: 7, // expires in 7 days
        path: '/' // domain-wide, entire wiki
} );

// Get cookie
var name = $.cookie( 'myName' );

// Delete cookie
// Deprecated since 1.2 please use $.removeCookie('foo') instead
$.cookie( 'myName', null );

$.removeCookie('foo')

   When deleting a cookie, you must use the same path and domain used when
   the cookie was set.

   Note that when MediaWiki server-side code sets a cookie it usually
   prefixes it with the database name; this prefix is available to
   JavaScript code as the mw.config variable wgCookiePrefix.

   Note that users will likely get separate cookies for /wiki/ and /w/
   paths in page URLs if you do not specify the extra option { path: '/' }
   when setting a cookie.

jquery.expandableField[edit]

     * jquery.expandableField

jquery.highlightText[edit]

     * jquery.highlightText

jquery.i18n[edit]

   MediaWiki version: â‰¥ 1.26
   Gerrit change 223201
     * jquery.i18n

jquery.json[edit]

   MediaWiki version: â‰¤ 1.24

   (removed in 1.25)
     * Plugin documentation

   Provides JSON encoding to old browsers which do not support
   JSON.stringify. Deprecated since MediaWiki 1.24^[1]. Removed in
   MediaWiki 1.25, use the "json" module instead (which lazy-loads the
   json2.js polyfill).

jquery.jStorage[edit]

   (deprecated in 1.28) Please use mediawiki.storage.
     * jquery.jStorage
     * Project home page (archive link) - Project on GitHub

var key = "myStorageKey",
        value = $.jStorage.get( key );

if ( !$.jStorage.storageAvailable() ) {
        throw new Error( 'No storage available. Fall back to ... or tell the use
r to install a real browser!' );
}

$.jStorage.listenKeyChange( key, function( key, action ) {
        if ( window.console && $.isFunction( console.log ) ) {
                console.log(key + " has been " + action);
        }
} );

value = {a: 1, b: 2, c: [3, 4, 5]};
$.jStorage.set( key, value );

jquery.localize[edit]

   MediaWiki version: â‰¥ 1.17
   r77710
     * API Documentation
     * jquery.localize

   (deprecated in 1.32) Gerrit change 456302

   Please use jquery.i18n instead.

   Localizes the elements in a jQuery collection.

jquery.makeCollapsible[edit]

   MediaWiki version: â‰¥ 1.18
   r78914

          See also Manual:Collapsible elements.

     * API Documentation
     * jquery.makeCollapsible

   Makes elements collapsible. It supports lots of variations such as:

   Simple
          Add "mw-collapsible" to an element (a <div> for example) with
          some content and save the page. The inner content of this
          element will be treated as collapsible content. Prepended to the
          element, before the collapsible content, is a toggle-link with a
          localized label (collapsible-expand, collapsible-collapse)

   Initial state
          Adding "mw-collapsed" as additional class will cause the element
          to be initially collapsed when the page is loaded.

   Custom label
          ^HTML5 only Using the data-collapsetext and data-expandtext
          attributes one can define a custom text for the toggle labels
          added by the script. When added in wikitext these could be
          populated by a localized message like:
          <div class="mw-collapsible" data-expandtext="{{int:show}}"
          data-collapsetext="{{int:hide}}">

   Remote toggle
          If you don't want the script to put the default toggle link
          (whether or not with a custom label) in your element, you can
          make one of your own. This could reside anywhere inside or
          outside the collapsible element. Its relationship to the
          collapsible element is detected by using an ID attribute with
          the prefix mw-customcollapsible and a corresponding class
          attribute with prefix mw-customtoggle for the collapsible
          element and the togglelink respectively.

   Example: Simple collapsible div or table

   Input:
{| class="infobox"
! Foo
| Bar
|-
! Lorem
| Ipsum
|-
! More info
|<!--
-->
{| class="wikitable mw-collapsible mw-collapsed" style="width: 100%;"
! Head
! Top
|-
| Cell
| content
|-
| This table is collapsible
| Because it has the "mw-collapsible" class
|-
| It was initially hidden, because it
| had the "mw-collapsed" class
|}<!--
-->
|-
|}

<div class="toccolours mw-collapsible" style="width: 400px;">
This is text is collapsible. {{Lorem}}
</div>

   Output:
   Foo Bar
   Lorem Ipsum
   More info
                  Head                                    Top
   Cell                                content
   This table is collapsible           Because it has the "mw-collapsible" class
   It was initially hidden, because it had the "mw-collapsed" class
   This is text is collapsible. Lorem ipsum dolor sit amet, consectetur
   adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore
   magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
   ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute
   irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
   fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident,
   sunt in culpa qui officia deserunt mollit anim id est laborum.
