
Contact

   archive-ouverte@inria.fr
   #HAL

   (BUTTON) Toggle navigation
   CCSD
     * HAL
          + HAL
          + HALSHS
          + TEL
          + MédiHAL
          + Liste des portails
          +
          + AURéHAL
          + API
          + Data
          + Documentation
     * Episciences.org
          + Episciences.org
          + Revues
          +
          + Documentation
     * Sciencesconf.org
     * Support

   (BUTTON)  Connexion (BUTTON)
     * Connexion
     * Connexion avec ORCID
     * se connecter avec Fédération
     *
     * Créer un compte
     *
     * Mot de passe oublié ?
     * Login oublié ?

     * fr
     * en

         HAL-Inria Les publications, logiciels... des scientifiques
   Inria
     * Accueil
     * Déposer
     * Consulter tout HAL
          + par date de publication/rédaction
          + par domaine
          + par type de publication
          + par collection
          + arXiv
          + les derniers dépôts
     * Publications Inria
     * Recherche
     * Services
          + HalTools : créer sa page web
          + Haltools : export RAWEB
          + X2Hal : import par lot
          + Consulter les structures de recherche connues de HAL
     * Documentation
          + Aide en ligne de HAL V3
          + Dernières évolutions de HAL V3
          + Documentation API HAL
          + Ajouter des vignettes
          + Aide en ligne Haltools
          + Aide en ligne de Bib2hal
     * OpenAccess
          + Inria soutient la science ouverte

   (BUTTON) hal-01425743, version 1

Scalable Task Parallelism for NUMA: A Uniform Abstraction for Coordinated
Scheduling and Memory Management

   Andi Drebes ^1 Antoniu Pop ^1 Karine Heydemann ^2 Albert Cohen ^3
   Nathalie Drach ^2 (BUTTON) Détails
   1 School of Computer Science [Manchester]
   2 ALSOC - Architecture et Logiciels pour Systèmes Embarqués sur Puce
   LIP6 - Laboratoire d'Informatique de Paris 6
   3 Parkas - Parallélisme de Kahn Synchrone
   DI-ENS - Département d'informatique de l'École normale supérieure,
   Inria Paris-Rocquencourt, CNRS - Centre National de la Recherche
   Scientifique : UMR 8548

       Andi Drebes ^1 AuthorId : 1443472
     Auteur

       Antoniu Pop ^1 AuthorId : 1443473
     Auteur

       Karine Heydemann ^2 AuthorId : 895914
     Auteur IdHAL : karine-heydemann

       Albert Cohen ^3 AuthorId : 79621
     Auteur IdHAL : acohen ORCID : https://orcid.org/0000-0002-8866-5343

       Nathalie Drach ^2 AuthorId : 1443474
     Auteur

   1 School of Computer Science [Manchester] (University of Manchester
   Oxford Road Manchester M13 9PL UK - Royaume-Uni) StructId : 90659
     * University of Manchester [Manchester] (Oxford Rd, Manchester M13
       9PL - Royaume-Uni) StructId : 121172

   2 ALSOC - Architecture et Logiciels pour Systèmes Embarqués sur Puce
   (France) StructId : 398846
     * LIP6 - Laboratoire d'Informatique de Paris 6 (4 Place JUSSIEU 75252
       PARIS CEDEX 05 - France) StructId : 233
          + UPMC - Université Pierre et Marie Curie - Paris 6 (4 place
            Jussieu - 75005 Paris - France) StructId : 93591
          + CNRS - Centre National de la Recherche Scientifique : UMR7606
            (France) StructId : 441569

   3 Parkas - Parallélisme de Kahn Synchrone (Département d'informatique
   École normale supérieure 45 rue d'Ulm F-75230 Paris Cedex 05 - France)
   StructId : 155688
     * DI-ENS - Département d'informatique de l'École normale supérieure
       (École normale supérieure 45 rue d'Ulm F-75230 Paris Cedex 05 -
       France) StructId : 25027
          + ENS Paris - École normale supérieure - Paris (45, Rue d'Ulm -
            75230 Paris cedex 05 - France) StructId : 59704
          + Inria - Institut National de Recherche en Informatique et en
            Automatique (Domaine de Voluceau Rocquencourt - BP 105 78153
            Le Chesnay Cedex - France) StructId : 300009
          + CNRS - Centre National de la Recherche Scientifique : UMR8548
            (France) StructId : 441569
     * Inria Paris-Rocquencourt (INRIA Rocquencourt : Domaine de Voluceau,
       Rocquencourt B.P. 105 78153 le Chesnay Cedex - France) StructId :
       86790
          + Inria - Institut National de Recherche en Informatique et en
            Automatique (Domaine de Voluceau Rocquencourt - BP 105 78153
            Le Chesnay Cedex - France) StructId : 300009
     * CNRS - Centre National de la Recherche Scientifique : UMR 8548
       (France) StructId : 441569

   (BUTTON) Masquer les détails
   Abstract : Dynamic task-parallel programming models are popular on
   shared-memory systems, promising enhanced scalability, load balancing
   and locality. Yet these promises are undermined by non-uniform memory
   access (NUMA). We show that using NUMA-aware task and data placement,
   it is possible to preserve the uniform abstraction of both computing
   and memory resources for task-parallel programming models while
   achieving high data locality. Our data placement scheme guarantees that
   all accesses to task output data target the local memory of the
   accessing core. The complementary task placement heuristic improves the
   locality of task input data on a best effort basis. Our algorithms take
   advantage of data-flow style task parallelism, where the privatization
   of task data enhances scalability by eliminating false dependences and
   enabling fine-grained dynamic control over data placement. The
   algorithms are fully automatic, application-independent,
   performance-portable across NUMA machines, and adapt to dynamic
   changes. Placement decisions use information about inter-task data
   dependences readily available in the run-time system and placement
   information from the operating system. We achieve 94% of local memory
   accesses on a 192-core system with 24 NUMA nodes, up to 5× higher
   performance than NUMA-aware hierarchical work-stealing, and even 5.6×
   compared to static interleaved allocation. Finally, we show that
   state-of-the-art dynamic page migration by the operating system cannot
   catch up with frequent affinity changes between cores and data and thus
   fails to accelerate task-parallel applications.
   Keywords : Task-parallel programming NUMA Scheduling Memory allocation
   Data-flow programming
   Type de document :
   Communication dans un congrès
   Domaine :

   Informatique [cs] / Langage de programmation [cs.PL]

   Liste complète des métadonnées (BUTTON)  Voir (BUTTON)  Masquer
   Littérature citée [29 références]  Voir  Masquer  Télécharger
